@value grey: #ccc;
@value colors: "./colors.css";
@value primary, secondary from colors;
@value small as bp-small, large as bp-large from "./breakpoints.css";
@value someValue: orange;

.base {
  content: "base";
}

/* stylelint-disable-next-line selector-class-pattern */
.camelCase {
  content: "camel";
}

.kebab-case {
  content: "kebab";
}

.composed {
  composes: base;
  composes: camelCase;
  composes: kebab-case;
}

.composed-with {
  compose-with: base;
}

.flexible {
  composes: flex from "./utils.css";
  flex-direction: column;
}

.globals {
  composes: u-whatever from global;
  composes: global(u-whatsoever);
  compose-with: global(u-anything);
}

:global(.js) .progressive {
  display: block;
}

:export {
  black: #000;
  white: #111;
}

:import("./path/to/file.css") {
  alias: keyfromfile;
}

/**
 * Modular CSS
 * https://github.com/tivac/modular-css
 */
.fieldset :external(input from "./input.css") {
  width: 50%;
}
